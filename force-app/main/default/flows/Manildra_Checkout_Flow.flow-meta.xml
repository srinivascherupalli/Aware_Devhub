<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>52.0</apiVersion>
    <assignments>
        <name>Assign_CartDesiredDate</name>
        <label>Assign CartDesiredDate</label>
        <locationX>357</locationX>
        <locationY>719</locationY>
        <assignmentItems>
            <assignToReference>CartDesiredDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Cart_delivery_Group.DesiredDeliveryDate</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Get_Orders</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Order_Id_to_Collection</name>
        <label>Assign Order Id to Collection</label>
        <locationX>694</locationX>
        <locationY>493</locationY>
        <assignmentItems>
            <assignToReference>ListofOrderswithSameAddress</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>Loop_Order_Records.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Loop_Order_Records</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Screen_Cart_Delivery_Date</name>
        <label>Assign Screen Cart Delivery Date</label>
        <locationX>400</locationX>
        <locationY>925</locationY>
        <assignmentItems>
            <assignToReference>CartDesiredDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Desired_Delivery_DateDatePicker</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Get_Orders</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignCurrentUserAccountId</name>
        <label>AssignCurrentUserAccountId</label>
        <locationX>576</locationX>
        <locationY>556</locationY>
        <assignmentItems>
            <assignToReference>CurrentUserAccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Get_Cart_Record.AccountId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Get_AccountId</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>The loop node is here for cosmetic purposes. It helps make the flow easier to read, but is not a necessary technical component.</description>
        <name>Loop</name>
        <label>Loop</label>
        <locationX>1764</locationX>
        <locationY>1132</locationY>
        <assignmentItems>
            <assignToReference>cartId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Refetch_Session_Subflow</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>In place so it doesn&apos;t continue the loop. if removed then the DuplicateOrderScreen will loop through each time the Session is Refetched (Subflow = Refetch Session).</description>
        <name>Skip_Decision_Outcome</name>
        <label>Skip Decision Outcome</label>
        <locationX>1533</locationX>
        <locationY>530</locationY>
        <assignmentItems>
            <assignToReference>SkipOrderDecision</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>SkipDecisionforStopSupplyandOrderDuplication</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Main_Decision_Hub</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>Account_on_Stop_Supply</name>
        <label>Account on Stop Supply</label>
        <locationX>190</locationX>
        <locationY>450</locationY>
        <defaultConnector>
            <targetReference>Get_Cart_delivery_Group</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Account_is_on_Stop_SupplyDEC</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_AccountId.AccountCreditStatus__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Stop Supply</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Screen_Stop_Supply</targetReference>
            </connector>
            <label>Account is on Stop Supply</label>
        </rules>
    </decisions>
    <decisions>
        <description>The Debug Screen Decision node determines whether to show the debug screen. The default is no.</description>
        <name>Debug_Screen_Decision</name>
        <label>Show Debug Screen?</label>
        <locationX>662</locationX>
        <locationY>168</locationY>
        <defaultConnector>
            <targetReference>Skip_Stop_Supply_and_Duplicate_Validation</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Debug_Screen_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>debug</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Debug_Screen</targetReference>
            </connector>
            <label>Debug Screen Outcome</label>
        </rules>
    </decisions>
    <decisions>
        <description>If there is already an Order with the Same Desired Delivery Date then show Screen. If not, then default out come.</description>
        <name>Decision_Order_Collection</name>
        <label>Decision Order Collection</label>
        <locationX>865</locationX>
        <locationY>717</locationY>
        <defaultConnector>
            <targetReference>Skip_Decision_Outcome</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Order_with_Same_Delivery_Date</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>ListofOrderswithSameAddress</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>SkipOrderDecision</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Duplicate_Order_Screen</targetReference>
            </connector>
            <label>Order with Same Delivery Date</label>
        </rules>
    </decisions>
    <decisions>
        <name>Desired_delivery_Date_is_Null</name>
        <label>Desired delivery Date is Null</label>
        <locationX>186</locationX>
        <locationY>721</locationY>
        <defaultConnector>
            <targetReference>Assign_CartDesiredDate</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>True_Desired_delivery_Date_is_Null</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Cart_delivery_Group.DesiredDeliveryDate</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Delivery_Date_Screen</targetReference>
            </connector>
            <label>True</label>
        </rules>
    </decisions>
    <decisions>
        <name>DuplicateOrderScreenDecision</name>
        <label>DuplicateOrderScreenDecision</label>
        <locationX>1075</locationX>
        <locationY>458</locationY>
        <defaultConnector>
            <targetReference>Skip_Decision_Outcome</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>YesCheckox_equals_False</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>OrderScreen_YesCheckbox</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>RedirectScreenforOrders</targetReference>
            </connector>
            <label>YesCheckox equals False</label>
        </rules>
    </decisions>
    <decisions>
        <description>The Main Decision Hub is the primary driver of the checkout flow.

It uses the following logic:
 - If mainCheckoutSession.IsProcessing = True, go to the wait screen.
 - Otherwise, for each session.state, go to the corresponding subflow.
 
Note: The nextState is passed into the subflow and the nextState value is set to mainCheckoutSession.state when: 
 - An asynchronous invocable action completes in an asynchronous subflow.
 - Or the Save Session node produces the nextState value for a synchronous subflow, and assigns it to the nextState variable in the main flow. 

Asynchronous invocable actions set mainCheckoutSession.isProcess = True.</description>
        <name>Main_Decision_Hub</name>
        <label>Main Decision Hub</label>
        <locationX>892</locationX>
        <locationY>889</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Error_Outcome</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.IsError</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Error_Subflow</targetReference>
            </connector>
            <label>Error</label>
        </rules>
        <rules>
            <name>Waiting_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.IsProcessing</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Wait_Debug_Decision</targetReference>
            </connector>
            <label>Waiting</label>
        </rules>
        <rules>
            <name>Shipping_Address_Outcome</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Manildra Shipping Address</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Start</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Manildra_Shipping_Address</targetReference>
            </connector>
            <label>Shipping Address</label>
        </rules>
        <rules>
            <name>Delivery_Method_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Delivery Method</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Delivery_Method</targetReference>
            </connector>
            <label>Delivery Method</label>
        </rules>
        <rules>
            <name>Checkout_Summary_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>M Checkout Summary</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>M_Checkout_Summary</targetReference>
            </connector>
            <label>Checkout Summary</label>
        </rules>
        <rules>
            <name>Order_Confirmation_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Manildra Order Confirmation</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Manildra_Order_Confirmation</targetReference>
            </connector>
            <label>Order Confirmation</label>
        </rules>
        <rules>
            <name>Cart_To_Order_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Cart To Order</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Cart_To_Order_Subflow</targetReference>
            </connector>
            <label>Cart To Order</label>
        </rules>
        <rules>
            <name>Payment_And_Billing_Address_Outcome</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>M Payment and Billing Address</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>M_Payment_and_Billing_Address</targetReference>
            </connector>
            <label>Payment And Billing Address</label>
        </rules>
        <rules>
            <name>Confirm_Price_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Confirm Price</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Confirm_Price_Subflow</targetReference>
            </connector>
            <label>Confirm Price</label>
        </rules>
        <rules>
            <name>Shipping_Cost_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Shipping Cost</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Shipping_Cost_Subflow</targetReference>
            </connector>
            <label>Shipping Cost</label>
        </rules>
        <rules>
            <name>Taxes_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Taxes</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Taxes_Subflow</targetReference>
            </connector>
            <label>Taxes</label>
        </rules>
        <rules>
            <name>Activate_Order_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Manildra Activate Order</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Manildra_Activate_Order</targetReference>
            </connector>
            <label>Activate Order</label>
        </rules>
    </decisions>
    <decisions>
        <description>Skip Decision for Stop Supply and Order Duplication has been done. This to remove the dml actions after it has already been done in the flow.</description>
        <name>Skip_Stop_Supply_and_Duplicate_Validation</name>
        <label>Skip Stop Supply and Duplicate Validation</label>
        <locationX>823</locationX>
        <locationY>402</locationY>
        <defaultConnector>
            <targetReference>Skip_Decision_Outcome</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>False</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>SkipDecisionforStopSupplyandOrderDuplication</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_Cart_Record</targetReference>
            </connector>
            <label>False</label>
        </rules>
    </decisions>
    <decisions>
        <description>The Wait Debug Decision node determines whether to show the debug screen. The default is no.</description>
        <name>Wait_Debug_Decision</name>
        <label>Show Wait Debug?</label>
        <locationX>1239</locationX>
        <locationY>894</locationY>
        <defaultConnector>
            <targetReference>Wait_Screen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Wait_Debug_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>debug</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Wait_Debug_Screen</targetReference>
            </connector>
            <label>Wait Debug Outcome</label>
        </rules>
    </decisions>
    <description>Flow used in B2B Storefront - Date Picker if Desired Delivery Date equals Null</description>
    <interviewLabel>Manildra Checkout Flow {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Manildra Checkout Flow</label>
    <loops>
        <description>Loops through each Order record related to the Account that the B2B User is currently logged into and with the Same Delivery Date.</description>
        <name>Loop_Order_Records</name>
        <label>Loop Order Records</label>
        <locationX>696</locationX>
        <locationY>721</locationY>
        <collectionReference>Get_Orders</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>Assign_Order_Id_to_Collection</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>Decision_Order_Collection</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>CheckoutFlow</processType>
    <recordLookups>
        <name>Get_AccountId</name>
        <label>Get AccountId</label>
        <locationX>422</locationX>
        <locationY>556</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Account_on_Stop_Supply</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>CurrentUserAccountId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Account</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>AccountCreditStatus__c</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Cart_delivery_Group</name>
        <label>Get CartDeliveryGroup</label>
        <locationX>195</locationX>
        <locationY>589</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Desired_delivery_Date_is_Null</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>CartId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>CartDeliveryGroup</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>DesiredDeliveryDate</queriedFields>
        <queriedFields>CartId</queriedFields>
        <queriedFields>DesiredDeliveryDate_Formula__c</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Cart_Record</name>
        <label>Get Cart Record</label>
        <locationX>576</locationX>
        <locationY>405</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>AssignCurrentUserAccountId</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>WebCart</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Orders</name>
        <label>Get Orders</label>
        <locationX>562</locationX>
        <locationY>719</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Loop_Order_Records</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>AccountId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_AccountId.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>DesiredDeliveryDate__c</field>
            <operator>IsNull</operator>
            <value>
                <elementReference>False</elementReference>
            </value>
        </filters>
        <filters>
            <field>DesiredDeliveryDate__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>CartDesiredDate</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Order</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <runInMode>SystemModeWithSharing</runInMode>
    <screens>
        <name>Debug_Screen</name>
        <label>Debug</label>
        <locationX>50</locationX>
        <locationY>1046</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Main_Decision_Hub</targetReference>
        </connector>
        <fields>
            <name>CheckoutSessionIdText</name>
            <fieldText>&lt;p&gt;Session Id: {!mainCheckoutSession.Id}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>currentstate</name>
            <fieldText>&lt;p&gt;State: {!mainCheckoutSession.State}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>sessionNextState</name>
            <fieldText>&lt;p&gt;Next State: {!mainCheckoutSession.NextState}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>jobIdDisplaydsaf</name>
            <fieldText>&lt;p&gt;JobId: {!mainCheckoutSession.Id}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>locked</name>
            <fieldText>&lt;p&gt;Locked? {!mainCheckoutSession.IsProcessing}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>order</name>
            <fieldText>&lt;p&gt;Order: {!mainCheckoutSession.OrderId}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>shouldCloseCartBool</name>
            <fieldText>&lt;p&gt;Should Close Cart? {!shouldCloseCart}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <description>Used to captured the Desired delivery Date if Cart Desired Delivery Date is Null</description>
        <name>Delivery_Date_Screen</name>
        <label>Delivery Date Screen</label>
        <locationX>194</locationX>
        <locationY>926</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>Assign_Screen_Cart_Delivery_Date</targetReference>
        </connector>
        <fields>
            <name>Desired_Delivery_DateDatePicker</name>
            <dataType>Date</dataType>
            <fieldText>Desired Delivery Date</fieldText>
            <fieldType>InputField</fieldType>
            <isRequired>true</isRequired>
            <validationRule>
                <errorMessage>&lt;p&gt;Please Choose a Weekday&lt;/p&gt;</errorMessage>
                <formulaExpression>NOT(OR(MOD({!Desired_Delivery_DateDatePicker} - DATE( 1900, 1, 7 ), 7 ) == 0, MOD({!Desired_Delivery_DateDatePicker} - DATE( 1900, 1, 7 ), 7 ) == 6))</formulaExpression>
            </validationRule>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>Duplicate_Order_Screen</name>
        <label>Duplicate Order Screen</label>
        <locationX>971</locationX>
        <locationY>568</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>DuplicateOrderScreenDecision</targetReference>
        </connector>
        <fields>
            <name>DisplayDuplicateText</name>
            <fieldText>&lt;p&gt;It looks like you already have a Delivery on this Date, are you sure you want to create another one? If no, leave as is and don&apos;t check the Yes box, press finished. You&apos;ll be redirected to your orders to have a look.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>DiplayDate</name>
            <fieldText>&lt;p&gt;Delivery Date: {!Get_Cart_delivery_Group.DesiredDeliveryDate_Formula__c}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>OrderScreen_YesCheckbox</name>
            <dataType>Boolean</dataType>
            <fieldText>Yes</fieldText>
            <fieldType>InputField</fieldType>
            <isRequired>true</isRequired>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>RedirctPage</name>
        <label>RedirctPage</label>
        <locationX>204</locationX>
        <locationY>274</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>RedirecttoAccountPage</name>
            <extensionName>forceCommunity:flowRedirect</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>pageName</name>
                <value>
                    <stringValue>cart</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>cartId</elementReference>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>RedirectScreenforOrders</name>
        <label>RedirectScreenforOrders</label>
        <locationX>1082</locationX>
        <locationY>231</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>RedirectOrderSummaryList</name>
            <extensionName>forceCommunity:flowRedirect</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>pageName</name>
                <value>
                    <stringValue>OrderSummary/OrderSummary/Default</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>Screen_Stop_Supply</name>
        <label>Screen Stop Supply</label>
        <locationX>391</locationX>
        <locationY>274</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>RedirctPage</targetReference>
        </connector>
        <fields>
            <name>TextStopSupply</name>
            <fieldText>&lt;p&gt;&lt;img src=&quot;https://manildra--dev--c.documentforce.com/sfc/servlet.shepherd/version/download/068O0000001hLSb?asPdf=false&amp;amp;operationContext=CHATTER&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px; color: rgb(255, 0, 0);&quot;&gt;This Account is currently on Stop Supply. Please Contact the Accounts Receivable team to create new Orders&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <description>The Wait Debug Screen node displays a version of the wait screen with debug information.</description>
        <name>Wait_Debug_Screen</name>
        <label>Wait Debug</label>
        <locationX>1679</locationX>
        <locationY>886</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Refetch_Session_Subflow</targetReference>
        </connector>
        <fields>
            <name>WaitingLabel</name>
            <fieldText>&lt;p&gt;Waiting Screen ( replace with a subflow at some point )&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>lockDisplay</name>
            <fieldText>&lt;p&gt;Locked: {!mainCheckoutSession.IsProcessing}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>stateDisplay</name>
            <fieldText>&lt;p&gt;State: {!mainCheckoutSession.State}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>sessionNextState2</name>
            <fieldText>&lt;p&gt;Next State: {!mainCheckoutSession.NextState}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>jobIdDislpay</name>
            <fieldText>&lt;p&gt;Job: {!mainCheckoutSession.Id}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>commerceScreenWait</name>
            <extensionName>forceCommunity:commerceScreenWait</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>cartCheckoutSessionId</name>
                <value>
                    <elementReference>mainCheckoutSession.Id</elementReference>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <outputParameters>
                <assignToReference>mainCheckoutSession.Id</assignToReference>
                <name>cartCheckoutSessionId</name>
            </outputParameters>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <description>The Wait Screen node displays when session.isProcessing = true

Async subflows set session.isProcessing = true before calling async invocable actions.

When async invocable actions complete, they change session.isProcessing to false and set session.state to session.nextState, not the flow variable nextState.</description>
        <name>Wait_Screen</name>
        <label>Wait</label>
        <locationX>1599</locationX>
        <locationY>747</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Refetch_Session_Subflow</targetReference>
        </connector>
        <fields>
            <name>commerceScreenWait_0</name>
            <extensionName>forceCommunity:commerceScreenWait</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>cartCheckoutSessionId</name>
                <value>
                    <elementReference>mainCheckoutSession.Id</elementReference>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <outputParameters>
                <assignToReference>mainCheckoutSession.Id</assignToReference>
                <name>cartCheckoutSessionId</name>
            </outputParameters>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <start>
        <locationX>363</locationX>
        <locationY>21</locationY>
        <connector>
            <targetReference>Get_Or_Create_Session_Subflow</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <subflows>
        <description>Calls the cartToOrderAction invocable action to convert a cart to a draft order.</description>
        <name>Cart_To_Order_Subflow</name>
        <label>Cart To Order</label>
        <locationX>1179</locationX>
        <locationY>1646</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>sfdc_checkout__CartToOrder</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>M Payment and Billing Address</stringValue>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <description>Calls the priceCart invocable action to confirm item pricing in the cart, perform complex pricing logic, and integrate with external pricing services.</description>
        <name>Confirm_Price_Subflow</name>
        <label>Confirm Price</label>
        <locationX>724</locationX>
        <locationY>1404</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>sfdc_checkout__ConfirmPrice</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Shipping Cost</stringValue>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <name>Delivery_Method</name>
        <label>Delivery Method</label>
        <locationX>899</locationX>
        <locationY>1501</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>sfdc_checkout__DeliveryMethod</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Taxes</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Shows the error message from the CartValidationOutput</description>
        <name>Error_Subflow</name>
        <label>Error</label>
        <locationX>691</locationX>
        <locationY>817</locationY>
        <flowName>sfdc_checkout__Error</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <description>The Get or Create Session node retrieves or creates the CartCheckoutSession for a given cart ID. There is only one valid session for a cart at a time. The most likely scenarios are Session.isArchived=false and Session.state is not Error or Completed.</description>
        <name>Get_Or_Create_Session_Subflow</name>
        <label>Get Or Create Session</label>
        <locationX>750</locationX>
        <locationY>39</locationY>
        <connector>
            <targetReference>Debug_Screen_Decision</targetReference>
        </connector>
        <flowName>sfdc_checkout__CheckoutSession</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <outputAssignments>
            <assignToReference>mainCheckoutSession</assignToReference>
            <name>checkoutSession</name>
        </outputAssignments>
    </subflows>
    <subflows>
        <name>M_Checkout_Summary</name>
        <label>M Checkout Summary</label>
        <locationX>1086</locationX>
        <locationY>1609</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Manildra_Checkout_Delivery_Summary</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Cart To Order</stringValue>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <name>M_Payment_and_Billing_Address</name>
        <label>M Payment and Billing Address</label>
        <locationX>1269</locationX>
        <locationY>1691</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Manildra_Payment_and_Billing_Address</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Manildra Activate Order</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>orderId</name>
            <value>
                <elementReference>mainCheckoutSession.OrderId</elementReference>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <name>Manildra_Activate_Order</name>
        <label>Manildra Activate Order</label>
        <locationX>1361</locationX>
        <locationY>1748</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Manildra_Activate_Order</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSession</name>
            <value>
                <elementReference>mainCheckoutSession</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Manildra Order Confirmation</stringValue>
            </value>
        </inputAssignments>
        <outputAssignments>
            <assignToReference>shouldCloseCart</assignToReference>
            <name>closeCart</name>
        </outputAssignments>
    </subflows>
    <subflows>
        <name>Manildra_Order_Confirmation</name>
        <label>Manildra Order Confirmation</label>
        <locationX>1459</locationX>
        <locationY>1799</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Manildra_Order_Confirmation</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <stringValue>Order Confirmation</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>mainCheckoutSession</name>
            <value>
                <elementReference>mainCheckoutSession</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Complete</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>shouldArchiveCheckoutAndCloseCart</name>
            <value>
                <elementReference>shouldCloseCart</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <subflows>
        <name>Manildra_Shipping_Address</name>
        <label>Manildra Shipping Address</label>
        <locationX>609</locationX>
        <locationY>1343</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Manildra_Shipping_Address</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Confirm Price</stringValue>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <description>The Refetch Session node retrieves the current checkout session without creating a new one.</description>
        <name>Refetch_Session_Subflow</name>
        <label>Refetch Session</label>
        <locationX>1752</locationX>
        <locationY>166</locationY>
        <connector>
            <targetReference>Debug_Screen_Decision</targetReference>
        </connector>
        <flowName>sfdc_checkout__CheckoutSession</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <outputAssignments>
            <assignToReference>mainCheckoutSession</assignToReference>
            <name>checkoutSession</name>
        </outputAssignments>
    </subflows>
    <subflows>
        <description>Calls the calcCartShipmentAction invocable action to calculate shipping costs. You can integrate with an external shipment vendor using Apex.</description>
        <name>Shipping_Cost_Subflow</name>
        <label>Shipping Cost</label>
        <locationX>815</locationX>
        <locationY>1460</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>sfdc_checkout__ShippingCost</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Delivery Method</stringValue>
            </value>
        </inputAssignments>
    </subflows>
    <subflows>
        <description>Calls the calcCartTaxesAction invocable action to calculate taxes. You can integrate with external tax services using Apex.</description>
        <name>Taxes_Subflow</name>
        <label>Taxes</label>
        <locationX>992</locationX>
        <locationY>1568</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>sfdc_checkout__Taxes</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>M Checkout Summary</stringValue>
            </value>
        </inputAssignments>
    </subflows>
    <variables>
        <name>CartDesiredDate</name>
        <dataType>Date</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>cartId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>CheckboxOutcome</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <name>CurrentUserAccountId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>debug</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <name>jobId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>ListofOrderswithSameAddress</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>mainCheckoutSession</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>CartCheckoutSession</objectType>
    </variables>
    <variables>
        <name>orderId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>shouldCloseCart</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <description>SkipDecisionforStopSupplyandOrderDuplicationhasbeendone.Thistoremovethedmlactionsafterithasalreadybeendoneintheflow.</description>
        <name>SkipDecisionforStopSupplyandOrderDuplication</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <name>SkipOrderDecision</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
</Flow>
